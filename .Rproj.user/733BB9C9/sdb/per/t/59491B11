{
    "contents" : "# install and load packages\n#install.packages(\"fpp\")\nlibrary(fpp)\n\n#install.packages(\"data.table\")\nlibrary(data.table)\n\n#install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n#install.packages(\"xts\")\nlibrary(xts)\n\n# clear global environment (if necessary)\nrm(list = ls())\n\n# read in GOM data \ngom <- read.csv(\"~/Desktop/Metro/Gom_jobs.csv\", header = TRUE, sep = \",\", na.strings= c(\"$null$\", \" \"))\n\n# convert data frame to data table\nsetDT(gom)\nstr(gom)\nView(gom)\ntables()\n\n### subset data to only keep relevant columns\ngom <- subset(gom, select = c(Data_source:created_yearmonth))\nstr(gom)\nView(gom)\n\n\n### subset data to only keep relevant rows\n# sum number of requisitions per month\ngom$one <- 1\ngom_months <- gom[, sum(one), by = created_yearmonth]\nsetnames(gom_months, c('created_yearmonth', 'counts'))\nstr(gom_months)\n\n# created dates from factor variable\ngom_months$date <- as.Date(gom_months$created_yearmonth, \"%m/%d/%Y\")\n\n# remove empty row \ngom_months <- gom_months[complete.cases(gom_months),]\n\n# create year and month variable from date\ngom_months$year <- as.numeric(format(gom_months$date, \"%Y\"))\ngom_months$month <- as.numeric(format(gom_months$date, \"%m\"))\n\n# subset to only include years from 2010 - 2014\ngom_months <- subset(gom_months, year %in% 2010:2014)\n\n# order rows by date\ngom_months <- gom_months[order(date), ]\n\n# remove data from July 2014 (last row)\ngom_months <- gom_months[-55, ]\nView(gom_months)\n\n# add excel forecast\ngom_months_excel <- c(4420, 4507, 4560, 4651, 4703, 4601, 4486, 4455, 4371, 4351, 4358, 4284, 4194, 4211, 4240, 4321, 4369, 4430)\n\n# removing the effect of the number of days\nmonthdays <- rep(c(31,28,31,30,31,30,31,31,30,31,30,31),5)\nmonthdays <- monthdays[-55:-60]\nView(monthdays)\n\nmonthdays_excel <- rep(c(31,28,31,30,31,30,31,31,30,31,30,31),2)\nmonthdays_excel <- monthdays_excel[-19:-24]\nView(monthdays_excel)\n\ngom_months <- gom_months/monthdays\ngom_months_excel <- gom_months_excel/monthdays_excel\nView(gom_months)\nView(gom_months_excel)\n\n### plot data\nggplot(data = gom_months2, aes(x = date, y = counts)) + geom_line()\n\n\n### Quick-R: Time Series and Forecasting\n# create vector for counts\ncounts <- gom_months\n\n\n# create ts for data from 2010 - 2014\ngom_months <- ts(counts, start = c(2010, 1), end = c(2014, 6), frequency = 12)\ngom_months_excel <- ts(gom_months_excel, start = c(2013, 1), end = c(2014, 6), frequency = 12)\nView(gom_months)\n\n# subset ts from 2010 - 2012 to create training data\ngom_train <- window(gom_months, start = c(2010, 1), end = c(2012, 12))\ngom_test <- window(gom_months, start = c(2013, 1), end = c(2014, 6))\n\n### forecast with mean, naive, and seasonal naive models\n# mean model\ngom_mean <- meanf(gom_train, h = 18)\n\n# naive model\ngom_naive <- naive(gom_train, h = 18)\n\n# seasonal naive model\ngom_sn <- snaive(gom_train, h = 18)\nplot(gom_sn, xlab = 'Time', ylab = 'Average No. of Reqs / Month')\nlines(gom_test, lwd = 2, col = 'red')\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c('blue', 'red'), legend=c(\"Seasonal Naive Forecast\",\"Actual Counts\"))\n\nView(gom_months_excel)\n### plots of actual data and models\nplot(gom_months)\nlines(gom_mean$mean, col = 'blue', lwd = 2)\nlines(gom_months_excel, col = 'blue', lwd = 2)\nlines(gom_naive$mean, col = 'red', lwd = 2)\nlines(gom_sn$mean, col = 'green', lwd = 2)\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c(2,3,4), legend=c(\"Mean method\",\"Naive method\",\"Seasonal naive method\"))\n\n\n### seasonal decomposition\n# breaking down the data into seasons and trend\ngom_stl <- stl(gom_months, s.window = 'periodic', t.window = 12, robust = T)\nplot(gom_stl)\nsummary(gom_stl)\n\nplot(elecequip, col=\"grey\",\n     main=\"Electrical equipment manufacturing\",\n     xlab=\"\", ylab=\"New orders index\")\nlines(seasadj(fit),col=\"red\",ylab=\"Seasonally adjusted\")\n\ndev.off()\nplot(gom_months, col = 'grey', ylab = 'Average No. of Reqs / Month', main = 'Seasonally Adjusted Average No. of Reqs / Month')\nlines(seasadj(gom_stl),col=\"red\",ylab=\"Seasonally adjusted\")\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c('grey', 'red'), legend=c(\"Original data\",\"Seasonally-adjusted data\"))\n\nseasonal <- gom_stl$time.series[,1]\ntrend <- gom_stl$time.series[,2]\nremainder <- gom_stl$time.series[,3]\n\nplot(trend)\nplot(seasonal)\nplot(remainder)\nplot(trend+remainder, ylab = 'Average No. of Reqs / Month', main = 'Seasonally Adjusted Average No. of Reqs / Month')\n\n\nmonthplot(gom_months, xlab = 'Months', ylab = 'Average No. of Reqs / Month', main = 'Average No. of Reqs in each month')\nseasonplot(gom_months, year.labels.left = T, xlab = 'Time', ylab = 'Average No. of Reqs / Month', main = 'Seasonality of Average No. of Reqs in each year')\n\n# stl model \ngom_stltrain <- stl(gom_train, s.window = 'periodic', t.window = 12, robust = T)\nplot(gom_stltrain)\ngom_stlf <- forecast(gom_stltrain, method = 'naive', h = 18)\nsummary(gom_stltrain)\n\nplot(gom_stlf, xlab = 'Time', ylab = 'Average No. of Reqs / Month')\nlines(gom_test, lwd = 2, col = 'red')\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c('blue', 'red'), legend=c(\"STL Forecast\",\"Actual Counts\"))\n\n\n### holt-winters\ngom_hwf <- hw(gom_train, seasonal = 'multiplicative', damped = T, initial = 'optimal', h = 18)\nlines(gom_hwf$mean, col = 'green', lwd = 2)\nplot(gom_hwf)\n\ngom_hwf2 <- hw(gom_train, seasonal = 'additive', damped = T, initial = 'optimal', h = 18)\n\ndev.off()\nplot(gom_hwf2, xlab = 'Time', ylab = 'Average No. of Reqs / Month')\nlines(gom_test, lwd = 2, col = 'red')\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c('blue', 'red'), legend=c(\"Holt-Winters Forecast\",\"Actual Counts\"))\n\n### arima\ngom_arima <- auto.arima(gom_train, stepwise = F, approximation = F)\ngom_arimaf <- forecast(gom_arima, h = 18)\nlines(gom_arimafore$mean, col = 'purple', lwd = 2)\nsummary(gom_arima)\nplot(gom_arimaf)\n\n# regression\ngom_reg <- tslm(gom_train ~ trend + season)\nsummary(gom_reg)\ngom_regf <- forecast(gom_reg, h = 18)\nlines(gom_regf$mean, col = 'blue', lwd = 2)\n\nplot(gom_regf, xlab = 'Time', ylab = 'Average No. of Reqs / Month')\nlines(gom_test, lwd = 2, col = 'red')\nlegend(\"topleft\",lty=1, lwd = 2 ,col=c('blue', 'red'), legend=c(\"Regression Forecast\",\"Actual Counts\"))\n\n\n### comparison plot and legend\ndev.off()\npar(oma = c(2, 1, 1, 1))\nplot(gom_months, xlab = 'Time', ylab = 'Average No. of Reqs / Month', main = 'Comparison of Forecasts to actual data')\nlines(gom_months_excel, col = 'orange', lwd = 2)\nlines(gom_sn$mean, col = 'purple', lwd = 2)\nlines(gom_stlf$mean, col = 'red', lwd = 2)\nlines(gom_hwf2$mean, col = 'green', lwd = 2)\nlines(gom_regf$mean, col = 'blue', lwd = 2)\npar(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)\nplot(0, 0, type = \"n\", bty = \"n\", xaxt = \"n\", yaxt = \"n\")\nlegend('bottom','groups',c('Linear Regression', 'Seasonal Naive', \"STL\",\"Holt-Winters\",\"Regression\"), lty = 1, lwd = 2, col = c('orange', 'purple','red', 'green', 'blue'), ncol = 3, bty = 'n')\n\n### checking accuracy\naccuracy(gom_sn, gom_test)[, 'MASE']\naccuracy(gom_stlf, gom_test)[, 'MASE']\naccuracy(gom_hwf, gom_test)[, 'MASE']\naccuracy(gom_hwf2, gom_test)[, 'MASE']\naccuracy(gom_regf, gom_test)[, 'MASE']\naccuracy(gom_months_excel, gom_test)\n\naccuracy(gom_sn, gom_test)[, 'RMSE']\naccuracy(gom_stlf, gom_test)[, 'RMSE']\naccuracy(gom_hwf2, gom_test)[, 'RMSE']\naccuracy(gom_regf, gom_test)[, 'RMSE']\n\n### auto exponential\ngom_ets <- ets(gom_train)\nplot(gom_ets)\n\n",
    "created" : 1409821234520.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1180179601",
    "id" : "59491B11",
    "lastKnownWriteTime" : 1410345857,
    "path" : "~/Desktop/Workforce/Metro/Demand Forecasting/Demand forecasting.R",
    "project_path" : "Demand forecasting.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}